{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search/search.component.tsx","pages/monsters.page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","item","className","src","image","alt","name","CardList","items","map","key","id","Search","placeholder","onInput","type","Monsters","state","monsters","search","handleOnInput","event","target","value","setState","fetch","then","result","json","monster","this","filter","toLowerCase","includes","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAUaA,G,MAAyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACpC,yBAAKC,UAAU,kBACb,yBAAKC,IAAKF,EAAKG,MAAOC,IAAKJ,EAAKK,OAChC,gCAAML,EAAKK,KAAX,QCFSC,G,MAA6B,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACxC,yBAAKN,UAAU,aAEXM,EAAMC,IAAI,SAACR,GAAD,OACR,kBAAC,EAAD,CAAMS,IAAKT,EAAKU,GAAIV,KAAMA,SCNrBW,G,MAA4B,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,QAAf,OACvC,2BAAOZ,UAAU,SAASa,KAAK,OAAOF,YAAaA,EAAaC,QAASA,M,4NCCpE,IAAME,EAAb,2MACEC,MAAgB,CACdC,SAAU,GACVC,OAAQ,IAHZ,EAgBEC,cAAgB,SAACC,GACf,IAAMF,EAAWE,EAAMC,OAA4BC,MACnD,EAAKC,SAAS,CAACL,YAlBnB,mFAMuB,IAAD,OAClBM,MAAM,8CACLC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAR,GAAQ,OAAI,EAAKM,SAAS,CAC9BN,SAAUA,EAAST,IACjB,SAACoB,GAAD,O,qVAAA,IAA6BA,EAA7B,CAAsCzB,MAAM,wBAAD,OAA0ByB,EAAQlB,GAAlC,oCAXnD,+BAqBY,IAAD,OACDO,EAAWY,KAAKb,MAAMC,SAASa,OAAO,SAACF,GAAD,OAAaA,EAAQvB,KAAK0B,cAAcC,SAAS,EAAKhB,MAAME,UACxG,OACE,oCACE,kBAAC,EAAD,CAAQL,QAASgB,KAAKV,cAAeP,YAAY,8BACjD,kBAAC,EAAD,CAAUL,MAAOU,SA1BzB,GAA8BgB,IAAMC,WCHrBC,EAJO,kBACpB,kBAAC,EAAD,OCOkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.6f2cb3c4.chunk.js","sourcesContent":["import React from 'react'\n\nimport { ICardListItem } from 'types/base.types'\n\nimport 'components/card/card.styles.css'\n\ninterface IProps {\n  item: ICardListItem\n}\n\nexport const Card: React.FC<IProps> = ({ item }) => (\n  <div className='card-container'>\n    <img src={item.image} alt={item.name} />\n    <h1> {item.name} </h1>\n  </div>\n)\n","import React from 'react'\n\nimport { ICardListItem } from 'types/base.types'\nimport { Card } from 'components/card/card.component'\n\nimport 'components/card-list/card-list.styles.css'\n\ninterface IProps {\n  items: Array<ICardListItem>;\n}\n\nexport const CardList: React.FC<IProps> = ({items}) => (\n  <div className='card-list'>\n    {\n      items.map((item: ICardListItem) => (\n        <Card key={item.id} item={item} />\n      ))\n    }\n  </div>\n)\n","import React from 'react'\n\nimport 'components/search/search.styles.css'\n\ninterface IProps {\n  onInput: (event: React.FormEvent) => void\n  placeholder?: string\n}\n\nexport const Search: React.SFC<IProps> = ({placeholder, onInput}) => (\n  <input className='search' type='text' placeholder={placeholder} onInput={onInput} />\n)\n","import React from 'react'\n\nimport { IMonster } from 'types/monsters.types'\nimport { CardList } from 'components/card-list/card-list.component'\nimport { Search } from 'components/search/search.component'\n\ninterface IState {\n  monsters: Array<IMonster>\n  search: string\n}\n\nexport class Monsters extends React.Component<{}, IState> {\n  state: IState = {\n    monsters: [],\n    search: '',\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(result => result.json())\n    .then(monsters => this.setState({\n      monsters: monsters.map(\n        (monster: IMonster) => ( {...monster, image: `https://robohash.org/${monster.id}?set=set2&size=200x200`} )\n      )\n    }))\n  }\n\n  handleOnInput = (event: React.FormEvent) => {\n    const search = ((event.target as HTMLInputElement).value)\n    this.setState({search})\n  }\n\n  render() {\n    const monsters = this.state.monsters.filter((monster) => monster.name.toLowerCase().includes(this.state.search))\n    return(\n      <>\n        <Search onInput={this.handleOnInput} placeholder=\"Look for monsters to hire\"/>\n        <CardList items={monsters}/>\n      </>\n    )\n  }\n}\n","import React from 'react';\n\nimport { Monsters } from 'pages/monsters.page'\n\nconst App: React.FC = () => (\n  <Monsters />\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}